/**
 * @file
 * @brief TestCompositionUpgrade:ExpectCompilationToFailDueToObsoleteNodes
 *
 * Test composition.
 *
 * @copyright Copyright © 2012–2015 Kosada Incorporated.
 * This code may be modified and distributed under the terms of the MIT License.
 * For more information, see http://vuo.org/license.
 */

digraph G
{
Add [type="vuo.math.add.VuoReal" version="1.0.0" label="Add|<refresh>refresh\l|<terms>terms\l|<done>done\r|<sum>sum\r" pos="505,314"];
AddPoints [type="vuo.point.add.VuoGenericType1" version="1.0.0" label="Add Points|<refresh>refresh\l|<terms>terms\l|<done>done\r|<sum>sum\r" pos="507,630"];
AreAllTrue [type="vuo.logic.areAllTrue" version="1.0.0" label="Are All True|<refresh>refresh\l|<terms>terms\l|<done>done\r|<allTrue>allTrue\r" pos="500,114"];
AreAnyTrue [type="vuo.logic.areAnyTrue" version="1.0.0" label="Are Any True|<refresh>refresh\l|<terms>terms\l|<done>done\r|<anyTrue>anyTrue\r" pos="503,182"];
AreEqual [type="vuo.math.areEqual.VuoReal" version="1.0.0" label="Are Equal|<refresh>refresh\l|<terms>terms\l|<tolerance>tolerance\l|<done>done\r|<equal>equal\r" pos="505,375" _tolerance="0.010000"];
CombineQuaternionRotations [type="vuo.quaternion.combine" version="1.0.0" label="Combine Quaternion Rotations|<refresh>refresh\l|<terms>terms\l|<done>done\r|<composite>composite\r" pos="507,689"];
FindMaximum [type="vuo.math.max.VuoReal" version="1.0.0" label="Find Maximum|<refresh>refresh\l|<terms>terms\l|<done>done\r|<max>max\r" pos="508,448"];
FindMinimum [type="vuo.math.min.VuoReal" version="1.0.0" label="Find Minimum|<refresh>refresh\l|<terms>terms\l|<done>done\r|<min>min\r" pos="508,507"];
IsOneTrue [type="vuo.logic.isOneTrue" version="1.0.0" label="Is One True|<refresh>refresh\l|<terms>terms\l|<done>done\r|<oneTrue>oneTrue\r" pos="505,249"];
Multiply [type="vuo.math.multiply.VuoReal" version="1.0.0" label="Multiply|<refresh>refresh\l|<terms>terms\l|<done>done\r|<product>product\r" pos="508,570"];
}
