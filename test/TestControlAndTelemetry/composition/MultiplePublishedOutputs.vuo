/**
 * @file
 * Test graph.
 *
 * @copyright Copyright © 2012—2013 Kosada Incorporated.
 * This code may be modified and distributed under the terms of the MIT License.
 * For more information, see http://vuo.org/license.
 */

digraph G 
{
PublishedInputs [type="vuo.in" label="PublishedInputs|<publishedIncrement1>publishedIncrement1\r|<publishedIncrement2>publishedIncrement2\r" _publishedIncrement1="10" _publishedIncrement2="100"];
Count1 [type="vuo.math.count.integer" label="Count1|<refresh>refresh\l|<increment>increment\l|<decrement>decrement\l|<count>count\r" _decrement="1"];
Count2 [type="vuo.math.count.integer" label="Count2|<refresh>refresh\l|<increment>increment\l|<decrement>decrement\l|<count>count\r" _decrement="1"];
DiscardDatafromEvent1 [type="vuo.type.integer.event" label="Discard Data from Event|<refresh>refresh\l|<dataAndEvent>dataAndEvent\l|<event>event\r"];
Hold1 [type="vuo.hold.VuoInteger" label="Hold1|<refresh>refresh\l|<initialValue>initialValue\l|<newValue>newValue\l|<heldValue>heldValue\r" _initialValue="0"];
Delay1 [type="vuo.test.delay" label="Delay|<refresh>refresh\l|<seconds>seconds\l|<event>event\r" _seconds="1"];
PublishedOutputs [type="vuo.out" label="PublishedOutputs|<publishedCount1>publishedCount1\l|<publishedCount2>publishedCount2\l|<publishedCount3>publishedCount3\l"];

PublishedInputs:publishedIncrement1 -> Count1:increment;
PublishedInputs:publishedIncrement2 -> Count2:increment;
Count1:count -> Hold1:newValue;
Count1:count -> DiscardDatafromEvent1:dataAndEvent;
DiscardDatafromEvent1:event -> Delay1:refresh;
Delay1:event -> Hold1:refresh;
Hold1:heldValue -> PublishedOutputs:publishedCount1;
Count2:count -> PublishedOutputs:publishedCount2;
Count2:count -> PublishedOutputs:publishedCount3;
}
