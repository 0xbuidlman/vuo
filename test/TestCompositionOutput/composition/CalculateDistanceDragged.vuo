/**
 * @file
 * Test composition.
 *
 * @copyright Copyright © 2012–2014 Kosada Incorporated.
 * This code may be modified and distributed under the terms of the MIT License.
 * For more information, see http://vuo.org/license.
 */

digraph G
{
SimulateMouseDrag [type="vuo.test.mouse" label="Simulate Mouse Drag|<refresh>refresh\l|<leftPressed>leftPressed\r|<leftReleased>leftReleased\r" pos="76.5,93.5"];
Get2DPointValues2 [type="vuo.point.get.VuoPoint2d" label="Get 2D Point Values|<refresh>refresh\l|<point>point\l|<x>x\r|<y>y\r" pos="525.5,77.5" _point="{\"x\":0,\"y\":0}"];
Get2DPointValues3 [type="vuo.point.get.VuoPoint2d" label="Get 2D Point Values|<refresh>refresh\l|<point>point\l|<x>x\r|<y>y\r" pos="525.5,163.5" _point="{\"x\":0,\"y\":0}"];
Subtract [type="vuo.math.subtract.VuoReal" label="Subtract|<refresh>refresh\l|<a>a\l|<b>b\l|<difference>difference\r" pos="764.5,79.5" _a="0.0" _b="0.0"];
Subtract2 [type="vuo.math.subtract.VuoReal" label="Subtract|<refresh>refresh\l|<a>a\l|<b>b\l|<difference>difference\r" pos="765.5,163.5" _a="0.0" _b="0.0"];
Hold2 [type="vuo.hold.VuoPoint2d" label="Hold Value|<refresh>refresh\l|<initialValue>initialValue\l|<newValue>newValue\l|<heldValue>heldValue\r" pos="373.5,76.5" _initialValue="{\"x\":0,\"y\":0}" _newValue="{\"x\":0,\"y\":0}"];
DiscardDatafromEvent [type="vuo.type.discardData.VuoPoint2d" label="Discard Data from Event|<refresh>refresh\l|<dataAndEvent>dataAndEvent\l|<event>event\r" pos="257,37.5" _dataAndEvent="{\"x\":0,\"y\":0}"];

PublishedInputs [type="vuo.in" label="PublishedInputs|<start>start\r"];
PublishedOutputs [type="vuo.out" label="PublishedOutputs|<xDistance>xDistance\l|<yDistance>yDistance\l"];

PublishedInputs:start -> SimulateMouseDrag:refresh;
SimulateMouseDrag:leftPressed -> Hold2:newValue;
SimulateMouseDrag:leftReleased -> DiscardDatafromEvent:dataAndEvent;
SimulateMouseDrag:leftReleased -> Get2DPointValues3:point;
Get2DPointValues2:x -> Subtract:b;
Get2DPointValues2:y -> Subtract2:b;
Get2DPointValues3:x -> Subtract:a;
Get2DPointValues3:y -> Subtract2:a;
Hold2:heldValue -> Get2DPointValues2:point;
DiscardDatafromEvent:event -> Hold2:refresh;
Subtract:difference -> PublishedOutputs:xDistance;
Subtract2:difference -> PublishedOutputs:yDistance;
}
